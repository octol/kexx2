TODO
====

Priority:
---------
- Fix compiler warnings.
- Use Map instead of c-style array in ObjectManager
- Move to using new c++11 style type safe enums.

Local issues:
-------------
- Go over all TODO in code.
- Remove all empty destructors for leaf node classes.
- Move to using Coord, Color etc objects instead of (x,y,xvel,yvel,r,g,b,a)
- Recheck all UNUSED statements.

Architectural issues:
---------------------
- Systematic way of doing dependency injection in e.g Interface.
- Raw pointer to dependencies?
    - FxManager
- Weapon really need to have object manager in constructor so we don't have
  to pass it as argument everything we use it. Maybe when (if?) we change to
  shorter Manager names it will not be such a hassle?
- Storing player data dynamically instead of C arrays.      <-- important

Minor:
------
- Passing references by const, and make functions const.
- new -> std::make_shared
- Rename object_manager -> objects ? (applies to all "managers")

Organisation of system classes:
-------------------------------
- Make the timer a local object.
- We should consider passing a struct of subsystems instead.
- Pass SDLc classes in constructors only? Or Maybe pass references to game
  specific classes in ctor and system class to separate check_input(),
  run_logic(), draw() functions?
  Possbly the other way around.

Subsystems overview:
--------------------

PlayerState
IGameState:
    Menu, World, BuyScreen, Finished, GameOver
ObjectManager
IObject:
    Object:
        Shot: 
            ShotRocket
        EnemyBonus, EnemyRammer, EnemySideways
        Ship
FxManager
ParticleManager: 
    Starfield
Weapon: 
    WeaponBlaster, WeaponRocket.
LevelManager

Feature changes:
----------------
- Automatic detection of game data path.
    This requires that we set configuration stuff in .kexx2rc instead of
    kexx2.cfg, due to write permission.
- Implement Factory pattern for object creation.

Specific issues:
----------------

Bugs:
-----
- Window title is not set.
- Hardcoded keycodes instead of using player_state.

