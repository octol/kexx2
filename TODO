TODO
====

Two approaches:
1) Bottom up rewriting the basic objects and entities to be modern and
   self-contained. This includes the managers, which should be switched to used
   STL containers and smart pointers (or maybe store by value?).
2) Top-down refactoring of the general layout and design. This includes coming
   up with a scheme on how to do dependency injection.

Local issues:
-------------
- Variable naming conventions.
- Go over all TODO in code.
- grep for "for" loops.
- Remove all empty destructors for leaf node classes.
- Fix compiler warnings.

Architectural issues:
---------------------
- Store pointers or objects in lists? e.g Sprites, Objects.
- Systematic way of doing dependency injection in e.g Interface.

Organisation of system classes:
-------------------------------
- Make the timer a local object.
- We should consider passing a struct of subsystems instead.
- Pass SDLc classes in constructors only? Or Maybe pass references to game
  specific classes in ctor and system class to separate check_input(),
  run_logic(), draw() functions?
- An issue is that the Mixer class is used as extern inside SDLc.

Subsystems overview:
--------------------

### Parts not yet done

IGameState: 
    Menu, World, BuyScreen, Finished, GameOver.
Weapon: 
    WeaponBlaster, WeaponRocket.
Object
    Shot: 
        ShotRocket.
    Enemy:
        EnemyBonus, EnemyRammer, EnemySideways
    Ship
ParticleManager: 
    Starfield
FxManager
LevelManager
ObjectManager

### Parts done


Feature changes:
----------------
- Automatic detection of game data path.
    This requires that we set configuration stuff in .kexx2rc instead of
    kexx2.cfg, due to write permission.
- Implement Factory pattern for object creation.

Media:
------
Change game over sound to something more serious. Consider having no sound for
now.

Specific issues:
----------------
BuyScreen::runLogic(), playerState argument shadows a class member.
World:World(), seems to do too much in constructor.

Bugs:
-----
- Blinking of ship when hit seems off, is this due to precalc hit surface?

